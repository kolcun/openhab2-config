import org.eclipse.xtext.xbase.lib.*
import org.openhab.model.script.actions.*
import org.eclipse.smarthome.model.script.actions.Timer

var Timer heatTimer = null
var Number initialPumpState = null

rule "CaptureHeaterStateChangedToOff"
when
Item Pool_Heater changed to OFF
then
	if(heatTimer != null){
        	heatTimer.cancel()
		heatTimer = null
	}
        Pool_Heat_Timer.sendCommand("off")
end

rule "HeaterTimer"
when
Item Pool_Heat_Timer changed
then

val Functions$Function1<Timer, Boolean> cancelIfRequired = [t |
        if(t != null){
                logInfo("PoolHeatTimer","One Hour Heater timer cancelled")
                t.cancel()
        }
        true
]

if(Pool_Heat_Timer.state == "off"){
      Pool_Heater.sendCommand(OFF);
      if(initialPumpState != null){
		Thread::sleep(60000)
		logInfo("PoolHeatTimer", "sleeping 60s before changing pump speed")
		Pool_Pump.sendCommand(initialPumpState)
		initialPumpState = null
      }
}else if (Pool_Heat_Timer.state == "1h") {
	cancelIfRequired.apply(heatTimer);
	pushover("Heating Pool for One Hour")
	logInfo("PoolHeatTimer", "Heating Pool for One Hour");
        initialPumpState = Pool_Pump.state
        Pool_Pump.sendCommand(50)
        Thread::sleep(20000)
        Pool_Heater.sendCommand(ON)

        heatTimer = createTimer(now.plusHours(1)) [| 
                logInfo("PoolHeatTimer", "Pool Heater timer expired")
                heatTimer.cancel()
                heatTimer = null
//                Pool_Heater.sendCommand(OFF)
//                Thread::sleep(60000)
//                Pool_Pump.sendCommand(initialPumpState)
                Pool_Heat_Timer.sendCommand("off")
//                initialPumpState = null;
                pushover("Pool Heater timer expired, turning off")
        ]
}else if(Pool_Heat_Timer.state == "2h"){
        cancelIfRequired.apply(heatTimer);
        pushover("Heating Pool for Two Hours")
        logInfo("PoolHeatTimer", "Heating Pool for Two Hours");
        initialPumpState = Pool_Pump.state
        Pool_Pump.sendCommand(50)
        Thread::sleep(20000)
        Pool_Heater.sendCommand(ON)
        
        heatTimer = createTimer(now.plusHours(2)) [| 
                logInfo("PoolHeatTimer", "Pool Heater timer expired")
                heatTimer.cancel()
                heatTimer = null
//                Pool_Heater.sendCommand(OFF)
//               Thread::sleep(60000)
//                Pool_Pump.sendCommand(initialPumpState)
                Pool_Heat_Timer.sendCommand("off")
//                initialPumpState = null;
                pushover("Pool Heater timer expired, turning off")
        ]
}else if(Pool_Heat_Timer.state == "4h"){
        cancelIfRequired.apply(heatTimer);
        pushover("Heating Pool for Four Hours")
        logInfo("PoolHeatTimer", "Heating Pool for Four Hours");
        initialPumpState = Pool_Pump.state
        Pool_Pump.sendCommand(50)
        Thread::sleep(20000)
        Pool_Heater.sendCommand(ON)

        heatTimer = createTimer(now.plusHours(4)) [|
                logInfo("PoolHeatTimer", "Pool Heater timer expired")
                heatTimer.cancel()
                heatTimer = null
//                Pool_Heater.sendCommand(OFF)
//                Thread::sleep(60000)
//                Pool_Pump.sendCommand(initialPumpState)
                Pool_Heat_Timer.sendCommand("off")
//                initialPumpState = null
                pushover("Pool Heater timer expired, turning off")
        ]
}

end
